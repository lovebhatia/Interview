package org.multiEnhancement;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class CallWork implements Callable<Object>
{
	int num;
	
	public CallWork(int num)
	{
		this.num=num;
	}
	
	@Override
	public Object call() throws Exception {
		// TODO Auto-generated method stub
		System.out.println(Thread.currentThread().getName()+"   is responsible to find sum of first"+num+"numbers");
		int sum=0;
		for (int i = 0; i < num; i++) {
			sum=sum+num;
			
		}
		return sum;
	}
}
	

public class CallAndFuture{
	public static void main(String [] args) throws Exception
	{
		CallWork[] jobs= {new CallWork(10),new CallWork(20)};
		ExecutorService executorService=Executors.newFixedThreadPool(1);
		for (CallWork callWork : jobs) {
			Future<Object> future=executorService.submit(callWork);
			System.out.println(future.get());
			}
		executorService.shutdown();
	}
	

}

